v2 <- 11:20
mylist <- list(dataA = v1, dataV = v2)
mylist
data.frame(mylist)
mylist <- list(dataA = v1, dataB = v2)
data.frame(mylist)
v1 <- 1:5
v2 <- 11:20
mylist <- list(dataA = v1, dataB = v2)
data.frame(mylist)
v1 <- 1:10
v2 <- 11:20
mylist <- list(dataA = v1, dataB = v2)
data.frame(mylist)
# 데이터의 갯수가 똑같기 때문에 데이터 프레임으로 변경 가능
# 데이터의 갯수가 다르면 갯수가 더 적은 리스트에서 반복으로 채워줌
mydataframe <- data.frame(mylist)
rownames(mydataframe)
colnames(mydataframe)
rownames(mydataframe) <- c("one","two","three","four","five","sic","seven","eight","nine","ten")
mydataframe
#01
rm(list = ls())
library(readxl)
subway <- read.csv("C:/Users/rproject/Desktop/2021 1학기 과제/R 심화/대전광역시도시철도공사_시간대별 승하차인원_2020년01월_05월.csv")
#02
str(subway)
subway$날짜 <- as.Date(subway$날짜, format = "%Y/%m/%d")
View(subway)
subway$날짜 <- as.Date(subway$날짜)
subway <- read.csv("C:/Users/rproject/Desktop/2021 1학기 과제/R 심화/대전광역시도시철도공사_시간대별 승하차인원_2020년01월_05월.csv")
#02
str(subway)
subway$날짜 <- as.Date(subway$날짜)
View(subway)
#02
str(subway)
#03
library(dplyr)
subway <- rename(subway, yyyymmdd = '날짜', station_num = '역번호', station = '역명', ride_getoff = '구분',
h0304 = 'X03.04시', h0405 = 'X04.05시', h0506 = 'X05.06시', h0607 = 'X06.07시',
h0708 = 'X07.08시', h0809 = 'X08.09시', h0910 = 'X09.10시', h1011 = 'X10.11시',
h1112 = 'X11.12시', h1213 = 'X12.13시', h1314 = 'X13.14시', h1415 = 'X14.15시',
h1516 = 'X15.16시', h1617 = 'X16.17시', h1718 = 'X17.18시', h1819 = 'X18.19시',
h1920 = 'X19.20시', h2021 = 'X20.21시', h2122 = 'X21.22시', h2223 = 'X22.23시',
h2324 = 'X23.00시', h0001 = 'X00.01시', h0102 = 'X01.02시', h0203 = 'X02.03시')
unique(subway$yyyymmdd)
subway$yyyymmdd <- unique(subway$yyyymmdd)
View(subway)
View(subway)
print(i,j)
#04
for (i in 5) {
for (j in 31) {
unique(subway$yyyymmdd)
print(i,j)
}
}
View(subway)
filter(subway, yyyymmdd == 2020-mm-dd)
filter(subway, yyyymmdd == 2020-01-01)
filter(subway, subway$yyyymmdd == 2020-0i-0j)
for (i in 5) {
for (j in 31) {
filter(subway, subway$yyyymmdd == "2020-0i-0j")
}
}
#04
unique(subway$yyyymmdd)
for (i in 152) {
filter(subway$yyyymmdd == i)
}
filter(subway$yyyymmdd == "20200101")
filter(subway$yyyymmdd == 20200101)
filter(subway$yyyymmdd == "20200101")
#03
library(dplyr)
filter(subway$yyyymmdd == "20200101")
filter(subway$yyyymmdd == 20200101)
#01
rm(list = ls())
library(readxl)
subway <- read.csv("C:/Users/rproject/Desktop/2021 1학기 과제/R 심화/대전광역시도시철도공사_시간대별 승하차인원_2020년01월_05월.csv")
#02
str(subway)
subway$날짜 <- as.Date(subway$날짜)
#03
library(dplyr)
subway <- rename(subway, yyyymmdd = '날짜', station_num = '역번호', station = '역명', ride_getoff = '구분',
h0304 = 'X03.04시', h0405 = 'X04.05시', h0506 = 'X05.06시', h0607 = 'X06.07시',
h0708 = 'X07.08시', h0809 = 'X08.09시', h0910 = 'X09.10시', h1011 = 'X10.11시',
h1112 = 'X11.12시', h1213 = 'X12.13시', h1314 = 'X13.14시', h1415 = 'X14.15시',
h1516 = 'X15.16시', h1617 = 'X16.17시', h1718 = 'X17.18시', h1819 = 'X18.19시',
h1920 = 'X19.20시', h2021 = 'X20.21시', h2122 = 'X21.22시', h2223 = 'X22.23시',
h2324 = 'X23.00시', h0001 = 'X00.01시', h0102 = 'X01.02시', h0203 = 'X02.03시')
filter(subway$yyyymmdd == 20200101)
i <- 20200101
filter(subway$yyyymmdd == i)
i <- 2020-01-01
filter(subway$yyyymmdd == i)
i <- 2020-01-01
filter(subway, subway$yyyymmdd == i)
filter(subway, subway$yyyymmdd == 20200101)
filter(subway, yyyymmdd == 20200101)
filter(subway, yyyymmdd == 2020-01-01)
filter(subway, subway$yyyymmdd == 2020-01-01)
filter(subway, subway$yyyymmdd == i)
filter(subway, subway$yyyymmdd == 2020-01-01)
filter(subway, subway$yyyymmdd == 20200101)
filter(subway, yyyymmdd == 20200101)
filter(subway, yyyymmdd == 2020-01-01)
day <- 2020-01-01
filter(subway, yyyymmdd == day)
day <- "2020-01-01"
filter(subway, yyyymmdd == day)
as.character(subway, "%Y%m%d")
as.character(subway$yyyymmdd, "%Y%m%d")
form = sprintf('Daejeon_subway_%s.txt', yyyymmdd)
as.character(day, "%Y%m%d")
form = sprintf('Daejeon_subway_%s.txt', day)
write.table(subway, file = form)
as.character(day, "%Y%m%d")
yyyymmdd <- as.character(day, "%Y%m%d")
yyyymmdd
date <- list(20200101:20200531)
View(date)
date <- list(20200101:20200531)
filter(subway, yyyymmdd == date)
i <- 1
date <- list(20200101:20200531)
filter(subway, yyyymmdd == date[i])
i <- 1
date <- list("2020-01-01":"2020-05-31")
filter(subway, yyyymmdd == date[i])
day <- "2020-01-01"
filter(subway, yyyymmdd == day)
for (i in 152) {
day <- subway$yyyymmdd
filter(subway, yyyymmdd == day[i])
yyyymmdd <- as.character(subway$yyyymmdd, "%Y%m%d")
form = sprintf('Daejeon_subway_%s.txt', yyyymmdd)
write.table(subway, file = form)
}
for (i in length(subway$yyymmdd)) {
day <- subway$yyyymmdd
filter(subway, yyyymmdd == day[i])
yyyymmdd <- as.character(subway$yyyymmdd, "%Y%m%d")
form = sprintf('Daejeon_subway_%s.txt', yyyymmdd)
write.table(subway, file = form)
}
for (i in length(subway$yyyymmdd)) {
print(subway$yyyymmdd)
#  day <- as.character(subway$yyyymmdd, "%Y%m%d")
#  filter(subway, yyyymmdd == day[i])
#  yyyymmdd <- as.character(subway$yyyymmdd, "%Y%m%d")
#  form = sprintf('Daejeon_subway_%s.txt', yyyymmdd)
#  write.table(subway, file = form)
}
"+"(2, 3)
?stdev
?stdev()
dfm1 <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(3, 4, 5, 6, 7, 8))
dmf2 <- data.frame(z = 5, 6, 7)
dfm2 <- data.frame(z = 5, 6, 7)
cbind(dfm1, dfm2)
dfm2
rbind(dfm1, dfm2)
x <- 1:100
sum(x > 50)
x > 50
m1 <- list(a = c(1:10), b = c(11:20))
m2 <- list(c = c(21:30), d = c(31:40))
m1 <- list(a = c(1:10), b = c(11:20))
m1$a
m2$d
mapply(sum, m1$a, m2$d)
f <- function(x, a) return((x - a)^2)
f(1:2, 3)
data1 <- "정보공개청구 회신서/붙임1. 사랑콜, 나눔콜, 바우쳐 택시 현황/1.2021 사랑콜, 나눔콜, 바우처 택시 현황(1분기)"
# 환경변수
# 저장되어있는 위치가 어디인지
.libPaths()
install.packages("DT")
library(DT)
datatable(iris)
getwd()
DT::saveWidget(res, "C:/Users/rproject/Desktop/2022-02/프로그램호환/iris.html", selfcontained = F)
res <- DT::datatable(iris)
DT::saveWidget(res, "C:/Users/rproject/Desktop/2022-02/프로그램호환/iris.html", selfcontained = F)
DT::saveWidget(res, "iris.html", selfcontained = F)
datatable(ifis, filter = 'top')
df <- iris
datatable(iris, filter = 'top')
df <- iris
datatable(iris, filter = 'top', extensions = "Buttons", options = list(
buttons =
list('copy', 'print', list(
extenc = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))
))
datatable(iris, filter = 'top',   extensions = 'Buttons', options = list(
dom = 'Bfrtip',
buttons = c('copy', 'print', 'csv', 'excel', 'pdf')))
df <- iris
library(xml2)
library(dplyr)
library(RMariaDB)
install.packages('RMariaDB')
install.packages("RMariaDB")
# install.packages('RMariaDB')
library(RMariaDB)
### DataBase 접속 정보
MDB.host <- "best.hnu.kr"
MDB.id <- "student"
MDB.pw <- "student"
MDB.db <- "hnu_sql"
MDB.port <- 3306
### DB 연결
con <- dbConnect(
RMariaDB::MariaDB(),
host = MDB.host,
username = MDB.id,
password = MDB.pw,
dbname = MDB.db,
port = MDB.port
)
### Table list
dbListTables(con)
### Query 결과를 data frame으로 저장
# DB:table -> R:dataframe
query.str <- "select * from airportparking"
rs <- dbGetQuery(con, query.str)
rs %>% head()
library(dplyr)
rs %>% head()
library(xml2)
## 김포국제공항만 추출
aprKor <- "김포국제공항"
query.str <- ("select * from airportparking where aprKor = '", aprKor, "'", sep = "")
rs %>% head()
library(plotly)
rs %>% filter()
plot_ly(rs, x)
### DB 연결 닫기
dbDisconnect(con)
## 서비스 URL
url <- "http://openapi.airport.co.kr/service/rest/AirportParking/airportparkingRT"
## 요청변수(Request Parameter)
serviceKey <- "khCPz52JtxTNuJ4ghK1qr1AX9J%2FHcsRWvJVlijKxE%2BGOmA4BfSEznFxaxNdiDkK2n6VvtoDAFXAASm3pPK88fg%3D%3D"
schAirportCode <- "GMP"
###
url.res <- paste0(url,
"?serviceKey=", serviceKey,
"&schAirportCode=", schAirportCode)
url.res
### read xml from URL
xml.raw <- read_xml(url.res)
xml.df <- fn_xml2df(xml.raw, "item")
fn_xml2df <- function(xml, tag.name="item"){
### library
# library(dplyr); library(xml2)
### find tag
xml.item.list <- xml %>% xml_find_all(paste0("//", tag.name))
xml.item.n <- xml.item.list %>% length()
### tag name
max.index <- xml.item.list %>% xml_length() %>% which.max()
tag.names <- xml.item.list[max.index] %>% xml_children() %>% xml_name()
### return data.frame
xml.df <- matrix(NA, xml.item.n, length(tag.names)) %>% as.data.frame()
names(xml.df) <- tag.names
### insert values
for(i in 1:xml.item.n){
xml.item.child <- xml.item.list[i] %>% xml_children()
item.names <- xml.item.child %>% xml_name()
item.values <- xml.item.child %>% xml_text()
for(j in 1:length(item.names)){
tag.name <- item.names[j]
xml.df[[tag.name]][i]<- item.values[j]
}
}
xml.df
}
xml.df <- fn_xml2df(xml.raw, "item")
df.use <- xml.df %>%
mutate(parkingUse = parkingFullSpace - parkingIstay) %>%
select(parkingAirportCodeName, parkingUse, parkingIstay)
df.use <- xml.df %>%
mutate(parkingUse = parkingFullSpace - parkingIstay) %>%
select(parkingAirportCodeName, parkingUse, parkingIstay)
df.use
xml.df
df.use <- xml.df %>%
mutate(parkingUse = parkingFullSpace - parkingIstay) %>%
select(parkingAirportCodeName, parkingUse, parkingIstay)
xml.df
xml.df %>% sapply(class)
xml.df$parkingFullSpace <- xml.df$parkingFullSpace %>% as.integer()
xml.df$parkingIstay <- xml.df$parkingIstay %>% as.integer()
df.use <- xml.df %>%
mutate(parkingUse = parkingFullSpace - parkingIstay) %>%
select(parkingAirportCodeName, parkingUse, parkingIstay)
df.melt <- reshape2::melt(df.use, "parkingAirportCodeName")
df.melt %>% ggplot2(x = parkingAirportCodeName, y = value, fill = variable)
library(ggplot2)
df.melt %>% ggplot2(x = parkingAirportCodeName, y = value, fill = variable)
df.use
df.melt %>% ggplot(aes(x = parkingAirportCodeName, y = value, fill = variable)) +
geom_bar(stat = "identity")
ggp <- df.melt %>%
ggplot(aes(x = parkingAirportCodeName, y = value, fill = variable)) +
geom_bar(stat = "identity") +
theme_minimal()
p <- ggplotly(ggp)
htmlwidgets::saveWidget(p, "airport.html", selfcontained = F)
library(xml2)
library(RMariaDB)
library(dplyr)
library(plotly)
library(ggplot2)
### 서비스URL
url <- "https://apis.data.go.kr/6300000/pis/parkinglotIF"
### 요청변수(Request Parameter)
serviceKey <- "khCPz52JtxTNuJ4ghK1qr1AX9J%2FHcsRWvJVlijKxE%2BGOmA4BfSEznFxaxNdiDkK2n6VvtoDAFXAASm3pPK88fg%3D%3D"
### Response URL = 서비스URL + 요청변수(Request Parameter)
url.res <- paste0(url,
'?serviceKey=', serviceKey,
'&schAirportCode=', schAirportCode)
### read xml from URL
xml.raw <- read_xml(url.res)
xml.df <- fn_xml2df(xml.raw, "item")
xml.df$parkingFullSpace <- xml.df$parkingFullSpace %>% as.integer()
xml.df$parkingIstay <- xml.df$parkingIstay %>% as.integer()
xml.df
### 서비스URL
url <- "https://apis.data.go.kr/6300000/pis/parkinglotIF"
### 요청변수(Request Parameter)
serviceKey <- "khCPz52JtxTNuJ4ghK1qr1AX9J%2FHcsRWvJVlijKxE%2BGOmA4BfSEznFxaxNdiDkK2n6VvtoDAFXAASm3pPK88fg%3D%3D"
### Response URL = 서비스URL + 요청변수(Request Parameter)
url.res <- paste0(url,
'?serviceKey=', serviceKey,
'&schAirportCode=', schAirportCode)
### read xml from URL
xml.raw <- read_xml(url.res)
xml.df <- fn_xml2df(xml.raw, "item")
xml.df
### 서비스URL
url <- "https://apis.data.go.kr/6300000/pis/parkinglotIF"
### 요청변수(Request Parameter)
serviceKey <- "khCPz52JtxTNuJ4ghK1qr1AX9J%2FHcsRWvJVlijKxE%2BGOmA4BfSEznFxaxNdiDkK2n6VvtoDAFXAASm3pPK88fg%3D%3D"
### Response URL = 서비스URL + 요청변수(Request Parameter)
url.res <- paste0(url,
'?serviceKey=', serviceKey)
url.res
### Response URL = 서비스URL + 요청변수(Request Parameter)
url.res <- paste0(url,
'?serviceKey=', serviceKey,
'?name=', '가수원도서관 주변 노상주차장')
url.res
### 서비스URL
url <- "https://apis.data.go.kr/6300000/pis/parkinglotIF"
### 요청변수(Request Parameter)
serviceKey <- "khCPz52JtxTNuJ4ghK1qr1AX9J%2FHcsRWvJVlijKxE%2BGOmA4BfSEznFxaxNdiDkK2n6VvtoDAFXAASm3pPK88fg%3D%3D"
numOfRows <- "10"
pageNo <- "1"
### Response URL = 서비스URL + 요청변수(Request Parameter)
url.res <- paste0(url,
'?serviceKey=', serviceKey,
'&numOfRows=', numOfRows,
"&pageNo=", pageNo)
### read xml from URL
xml.raw <- read_xml(url.res)
xml.df <- fn_xml2df(xml.raw, "item")
xml.df
df.use <- xml.df %>% mutate(usQty = totalQty - resQty) %>%
select(name, parkingUse, resQty)
xml.df$totalQty <- xml.df$totalQty %>% as.integer()
xml.df$resQty <- xml.df$resQty %>% as.integer()
df.use <- xml.df %>% mutate(usQty = totalQty - resQty) %>%
select(name, parkingUse, resQty)
df.use <- xml.df %>% mutate(useQty = totalQty - resQty) %>%
select(name, useQty resQty)
df.use <- xml.df %>% mutate(useQty = totalQty - resQty) %>%
select(name, useQty, resQty)
df.use
df.melt <- reshape2::melt(df.use, "name")
df.melt
ggp <- df.melt %>% ggplot(aes(x=name, y=value, fill=variable)) +
geom_bar(stat = "identity") + theme_minimal()
p <- ggplotly(ggp)
htmlwidgets::saveWidget(p, "./df/airport.html", selfcontained = F) #내문서에서 확인 가능
p
numOfRows <- "3"
pageNo <- "1"
### Response URL = 서비스URL + 요청변수(Request Parameter)
url.res <- paste0(url,
'?serviceKey=', serviceKey,
'&numOfRows=', numOfRows,
"&pageNo=", pageNo)
### read xml from URL
xml.raw <- read_xml(url.res)
xml.df <- fn_xml2df(xml.raw, "item")
xml.df$totalQty <- xml.df$totalQty %>% as.integer()
xml.df$resQty <- xml.df$resQty %>% as.integer()
df.use <- xml.df %>% mutate(useQty = totalQty - resQty) %>%
select(name, useQty, resQty)
df.melt <- reshape2::melt(df.use, "name")
ggp <- df.melt %>% ggplot(aes(x=name, y=value, fill=variable)) +
geom_bar(stat = "identity") + theme_minimal()
p <- ggplotly(ggp)
numOfRows <- "5"
pageNo <- "1"
### Response URL = 서비스URL + 요청변수(Request Parameter)
url.res <- paste0(url,
'?serviceKey=', serviceKey,
'&numOfRows=', numOfRows,
"&pageNo=", pageNo)
### read xml from URL
xml.raw <- read_xml(url.res)
xml.df <- fn_xml2df(xml.raw, "item")
xml.df$totalQty <- xml.df$totalQty %>% as.integer()
xml.df$resQty <- xml.df$resQty %>% as.integer()
df.use <- xml.df %>% mutate(useQty = totalQty - resQty) %>%
select(name, useQty, resQty)
df.melt <- reshape2::melt(df.use, "name")
ggp <- df.melt %>% ggplot(aes(x=name, y=value, fill=variable)) +
geom_bar(stat = "identity") + theme_minimal()
p <- ggplotly(ggp)
ggp <- df.melt %>% ggplot(aes(x=name, y=value, fill=variable)) +
geom_bar(stat = "identity") + theme_minimal() + cood_flip()
ggp <- df.melt %>% ggplot(aes(x=name, y=value, fill=variable)) +
geom_bar(stat = "identity") + theme_minimal() + coord_flip()
p <- ggplotly(ggp)
p
totalQty - resQty
xml.df
df.use <- xml.df %>% mutate(useQty = totalQty - resQty) %>%
select(name, useQty, resQty)
df.melt <- reshape2::melt(df.use, "name")
ggp <- df.melt %>% ggplot(aes(x=name, y=value, fill=variable)) +
geom_bar(stat = "identity") + theme_minimal() + coord_flip()
ggp
ggp <- df.melt %>% ggplot(aes(x=name, y=value, fill=variable)) +
geom_bar(stat = "identity") + theme_minimal()
ggp
df.melt
pageNo <- "144"
### Response URL = 서비스URL + 요청변수(Request Parameter)
url.res <- paste0(url,
'?serviceKey=', serviceKey,
'&numOfRows=', numOfRows,
"&pageNo=", pageNo)
### read xml from URL
xml.raw <- read_xml(url.res)
xml.df <- fn_xml2df(xml.raw, "item")
xml.df$totalQty <- xml.df$totalQty %>% as.integer()
xml.df$resQty <- xml.df$resQty %>% as.integer()
df.use <- xml.df %>% mutate(useQty = totalQty - resQty) %>%
select(name, useQty, resQty)
df.use
pageNo <- "1"
### Response URL = 서비스URL + 요청변수(Request Parameter)
url.res <- paste0(url,
'?serviceKey=', serviceKey,
'&numOfRows=', numOfRows,
"&pageNo=", pageNo)
### read xml from URL
xml.raw <- read_xml(url.res)
xml.df <- fn_xml2df(xml.raw, "item")
xml.df$totalQty <- xml.df$totalQty %>% as.integer()
xml.df$resQty <- xml.df$resQty %>% as.integer()
df.use <- xml.df %>% mutate(useQty = totalQty - resQty) %>%
select(name, useQty, resQty)
df.use
df.melt <- reshape2::melt(df.use, "name")
ggp <- df.melt %>% ggplot(aes(x = name, y = value, fill = variable)) +
geom_bar(stat = "identity") + theme_minimal()
p <- ggplotly(ggp)
p
ggp <- df.melt %>% ggplot(aes(x = name, y = value, fill = variable)) +
geom_bar(stat = "identity") + theme_minimal() + coord_flip()
p <- ggplotly(ggp)
p
ggp <- df.melt %>% ggplot(aes(x = reorder(name, value), y = value, fill = variable)) +
geom_bar(stat = "identity") + theme_minimal() + coord_flip()
p <- ggplotly(ggp)
p
719/5
for (i in 1:144) {
serviceKey <- "khCPz52JtxTNuJ4ghK1qr1AX9J%2FHcsRWvJVlijKxE%2BGOmA4BfSEznFxaxNdiDkK2n6VvtoDAFXAASm3pPK88fg%3D%3D"
numOfRows <- "5"
pageNo <- i
url.res <- paste0(url,
'?serviceKey=', serviceKey,
'&numOfRows=', numOfRows,
"&pageNo=", pageNo)
xml.raw <- read_xml(url.res)
}
setwd("C:/Users/rproject/Desktop/22-02/22-02/프로그램 호환")''
getwd()
setwd("C:/Users/rproject/Desktop/22-02/22-02/프로그램 호환")
getwd()
library(tidyr)
library(dplyr)
library(stringr)
all <- read.csv("data/전국관광지정보표준데이터.csv", header = T, fileEncoding = "euc-kr")
all %>% head()
# 필요한 변수만 추출
all_1 <- all %>% select(c(관광지명:경도,관광지소개,관리기관명,제공기관코드,제공기관명))
Gyeonggi <- all_1 %>% filter(str_detect(string = 제공기관명, pattern = "경기도"))
Gyeonggi$제공기관명 %>% unique()
